buildscript {
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE'
//        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
//        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.4.2'
        classpath 'net.saliman:gradle-cobertura-plugin:2.5.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'scala'
//    id 'com.github.lkishalmi.gatling' version '0.7.1'
}

repositories {
    mavenCentral()
}

group = 'com.myorg.samplespringboot'
version = '1.0.0'
description = """Sample Spring Boot Service"""

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
//apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'checkstyle'
apply plugin: 'cobertura'
apply plugin: 'findbugs'
apply plugin: "org.sonarqube"

checkstyle {
    toolVersion = '8.3'
    showViolations = true
    configFile = new File('google_check_style.xml')
//    maxWarnings = 100
}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*',]
    coverageReportDir = new File("$buildDir/reports/cobertura")
    coverageExcludes = ['.*org.slf4j.Logger.*']
//    coverageCheckPackageLineRate = 100;
//    coverageCheckTotalLineRate = 100;
//    coverageCheckHaltOnFailure = true;
    coverageTestTasks {
        project.tasks.withType(Test).matching {
            it.name.contains("test")
        }
    }
}

findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-aop'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-jdbc'
    exclude group: 'org.springframework', module: 'spring-aspects'
    exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    exclude group: 'org.mapstruct', module: 'mapstruct'
    exclude group: 'javax.activation', module: 'activation'
}

dependencies {
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.2.RELEASE')
    compile(group: 'org.springframework', name: 'spring-jdbc', version: '5.0.1.RELEASE')
//    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '1.5.7.RELEASE')
    compile(group: 'io.springfox', name: 'springfox-swagger2', version: '2.6.1')
    compile(group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.6.1')
    compile(group: 'org.springframework.cloud', name: 'spring-cloud-config-client', version: '1.2.3.RELEASE')
    compile(group: 'org.springframework', name: 'spring-context-support', version: '4.3.8.RELEASE')
    compile(group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6')
    compileOnly('org.projectlombok:lombok')
    
    //PerfMotor
    compile(group: 'io.gatling', name: 'gatling-core', version: '2.3.0')
    compile(group: 'io.gatling', name: 'gatling-app', version: '2.3.0')
    compile(group: 'commons-io', name: 'commons-io', version: '2.6')
    compile(group: 'org.scala-lang', name: 'scala-library', version: '2.12.3')
    compile(group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '2.3.0')
    compile(group: 'io.gatling', name: 'gatling-app', version: '2.3.0')
    
    //Database related
    compile(group: 'com.zaxxer', name: 'HikariCP', version: '2.6.0')

    //Test
    testCompile("com.h2database:h2:1.4.193")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    // Test dependecies (Spock)
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4')
    testCompile('org.spockframework:spock-spring:+')
    testCompile('com.athaydes:spock-reports:1.3.1')
    testRuntime "org.objenesis:objenesis:2.5.1"
    testRuntime 'net.bytebuddy:byte-buddy:1.6.5'
    //compile("org.awaitility:awaitility-groovy:3.0.0")
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
    /*performanceTest {
        scala {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/performanceTest/scala')
        }
    }*/
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    performanceTestCompile.extendsFrom testCompile
    performanceTestRuntime.extendsFrom testRuntime
}

test.finalizedBy(project.tasks.cobertura)

tasks.withType(Test) {
    beforeTest { desc ->
        println "Preparing to execute test [${desc.className}].${desc.name}"
    }
    afterTest { desc, result ->
        println "Executed the test [${desc.className}].${desc.name} and the result is ${result.resultType}"
    }
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task functionalTest (type : Test) {
    description = "Functional testing for the process"
    group = "Test"
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    outputs.upToDateWhen {false}
}

/*
task performanceTest(type: JavaExec) {
//    dependsOn testClasses
    description = "Load test with Gatling"
    group = "Test"
    classpath = sourceSets.performanceTest.runtimeClasspath
    jvmArgs = [
            "-Dgatling.core.directory.binaries=${sourceSets.performanceTest.output.classesDir.toString()}",
    ]
    main = "io.gatling.app.Gatling"
    args = [
            "--binaries-folder", sourceSets.performanceTest.output.classesDir.toString(), // ignored because of above bug
            '-s', 'com.myorg.samplespringboot.simulation.PerformanceSimulation',
            '--results-folder', "${buildDir}/reports/performanceTest",
    ]
}*/
